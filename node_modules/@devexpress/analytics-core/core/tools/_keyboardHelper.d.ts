/**
* DevExpress Analytics (core\tools\_keyboardHelper.d.ts)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IAction } from '../../widgets/utils';
import { ISelectionProvider } from '../selection/_selection';
import { UndoEngine } from '../../undo-engine/undoengine';
export interface IShortcutActionList {
    processShortcut: (actions: IAction[], e: JQueryKeyEventObject) => void;
    toolbarItems: IAction[] | ko.Observable<IAction[]> | ko.Computed<IAction[]>;
    enabled?: ko.Observable<boolean> | ko.Computed<boolean>;
}
export declare class KeyboardHelper {
    private _selection;
    private _undoEngine;
    constructor(selection: ISelectionProvider, undoEngine?: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>);
    processShortcut(e: JQueryKeyEventObject): boolean;
    processEsc(): void;
    moveSelectedControls(leftUp: boolean, isHoriz: boolean, sign: number): void;
    shortcutMap: {
        [key: number]: (e: any) => boolean;
    };
}
export declare class KeyDownHandlersManager {
    private _handlers;
    private _targetElement;
    private readonly _activeHandler;
    private _removeHandler;
    constructor(targetElement: JQuery);
    bindHandler(element: Element, handler: (e: JQueryKeyEventObject) => void): void;
}
