/**
* DevExpress Analytics (core\utils\_utils.d.ts)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { ISerializationInfoArray } from '../../serializer/serializationInfo';
import { UndoEngine } from '../../undo-engine/undoengine';
import { IAction } from '../../widgets/utils';
import { ISurfaceContext } from '../elements/baseSurface';
import { DesignControlsHelper } from '../internal/_controlsHelper';
import { SurfaceSelection } from '../selection/_selection';
import { SnapLinesCollector } from '../snapLines/_snapLinesCollector';
import { GroupObject } from '../widgets/propertygrid/_group';
import { ControlsFactory } from './controlsFactory';
import { IDesignerModel } from './_designerCreator';
export declare type SizeFactorType = 'xl' | 'lg' | 'md' | 'sm' | 'xs';
export declare function copyObservables(from: any, to: any): void;
export declare function _wrapModelInObservable<T>(model: T | ko.Observable<T> | ko.Computed<T>): ko.Observable<T>;
export declare function compareObjects(a: any, b: any): boolean;
export declare var cssTransform: string[];
export declare var DEBUG: boolean;
export declare function getFullPath(path: string, dataMember: string): string;
export declare function loadTemplates(): any;
export declare function getSizeFactor(width: any): SizeFactorType;
export declare var staticContext: {
    _static: {
        searchPlaceholder: () => any;
        selectPlaceholder: () => any;
        noDataText: () => any;
        ajaxSetup: import("../internal/_ajaxSetup").AjaxSetup;
    };
};
export declare var _defaultStaticContext: (newVal?: {}) => {};
export declare function appendStaticContextToRootViewModel(root: any, dx?: any): void;
export interface IAjaxSettings {
    uri: string;
    action: string;
    arg: any;
    processErrorCallback?: (message: string, jqXHR: any, textStatus: any) => void;
    ignoreError?: () => boolean;
    customOptions?: any;
    isError?: (data: any) => boolean;
    getErrorMessage?: (jqXHR: any) => string;
}
export declare function _ajax(uri: any, action: any, arg: any, processErrorCallback?: (message: string, jqXHR: any, textStatus: any) => void, ignoreError?: () => boolean, customOptions?: any, isError?: (data: any) => boolean, getErrorMessage?: (jqXHR: any) => string): JQuery.Promise<any, any, any>;
export declare function _ajaxWithOptions(options: IAjaxSettings): JQuery.Promise<any, any, any>;
export declare var ajax: (...params: any[]) => any;
export declare function setAjax(newFunc: any): void;
export interface ICommonCustomizationHandler {
    customizeActions?: (actions: IAction[]) => void;
    customizeLocalization?: (callbacks?: JQueryPromise<any>[]) => void;
    onServerError?: (e: any) => void;
    beforeRender?: (designerModel: any) => void;
}
export interface ICommonBindingCustomizationHandler<T> {
    _eventSenderCreated?: (sender: T) => void;
}
export interface INamedValue {
    displayName: string;
    value: any;
}
export declare function cutRefs(model: any): any;
export interface IDesignerPart {
    id: string;
    templateName: string;
    model: any;
}
export declare var DesignerBaseElements: {
    MenuButton: string;
    Toolbar: string;
    Toolbox: string;
    Surface: string;
    RightPanel: string;
};
export declare function generateDefaultParts(model: any): IDesignerPart[];
export declare function createActionWrappingFunction(wrapperName: string, func: (model: any, originalHandler: (model?: any) => any) => any): (actions: IAction[]) => void;
export declare function createDesigner(model: ko.Observable | ko.Computed, surface: ko.Observable<ISurfaceContext> | ko.Computed<ISurfaceContext>, controlsFactory: ControlsFactory, groups?: GroupObject, editors?: ISerializationInfoArray, parts?: IDesignerPart[], rtl?: boolean, selection?: SurfaceSelection, designControlsHelper?: DesignControlsHelper, undoEngine?: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>, customMerge?: any, snapLinesCollector?: SnapLinesCollector, groupLocalizationIDs?: {
    [key: string]: string;
}): IDesignerModel;
export declare function localizeNoneString(noneValue: any): any;
export declare function parseZoom(val: string): number;
export declare function getResizableOptions($element: Element, panelOffset: string, minWidth: number, position: string, startPosition: string, width?: ko.MaybeSubscribable<number>, disabled?: ko.MaybeSubscribable<boolean>): {
    starting: () => void;
    handles: string;
    stopped: () => undefined;
    stop: () => undefined;
    resize: () => void;
    disabled: any;
    zoom: number;
    minimumWidth: number;
    maximumWidth: number;
    $element: Element;
};
