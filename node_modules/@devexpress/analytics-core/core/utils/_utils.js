/**
* DevExpress Analytics (core\utils\_utils.js)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var ko = require("knockout");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _localization_1 = require("../../property-grid/localization/_localization");
var _fonts_1 = require("../../property-grid/widgets/fonteditor/_fonts");
var _internal_1 = require("../../serializer/_internal");
var _utils_1 = require("../../serializer/_utils");
var _utils_2 = require("../../widgets/_utils");
var _dragDropHandler_1 = require("../dragDrop/_dragDropHandler");
var _dragHelperContent_1 = require("../dragDrop/_dragHelperContent");
var _selectionDragDropHandler_1 = require("../dragDrop/_selectionDragDropHandler");
var _toolboxDragDropHandler_1 = require("../dragDrop/_toolboxDragDropHandler");
var ajaxSetup_1 = require("../internal/ajaxSetup");
var _inlineTextEdit_1 = require("../internal/_inlineTextEdit");
var _processError_1 = require("../internal/_processError");
var _utils_3 = require("../internal/_utils");
var _combinedObj_1 = require("../selection/_combinedObj");
var _selection_1 = require("../selection/_selection");
var _snapLinesCollector_1 = require("../snapLines/_snapLinesCollector");
var _snapLinesHelper_1 = require("../snapLines/_snapLinesHelper");
var tabPanel_1 = require("../tools/tabPanel");
var _designerCreator_1 = require("./_designerCreator");
var _infoMessageHelpers_1 = require("./_infoMessageHelpers");
var _visitors_1 = require("./_visitors");
function copyObservables(from, to) {
    Object.keys(from || {}).forEach(function (name) {
        if (ko.isObservable(from[name])) {
            to[name](from[name]());
        }
        else if (!$.isFunction(from[name])) {
            copyObservables(from[name], to[name]);
        }
    });
}
exports.copyObservables = copyObservables;
function _wrapModelInObservable(model) {
    return ko.isWritableObservable(model) ? model : ko.observable(null);
}
exports._wrapModelInObservable = _wrapModelInObservable;
function compareObjects(a, b) {
    var result = a && b && !(a instanceof Array) && !(b instanceof Array);
    result = result && (Object.getOwnPropertyNames(a).length === Object.getOwnPropertyNames(b).length);
    if (result) {
        Object.keys(a || {}).some(function (name) {
            if (name.indexOf('_') !== 0 && (typeof a[name] !== 'function' || ko.isObservable(a[name]))) {
                if (ko.isObservable(a[name])) {
                    result = ko.unwrap(a[name]) === ko.unwrap(b[name]);
                }
                else if (a[name] instanceof Array) {
                    if ((b[name] instanceof Array) && a[name].length === b[name].length) {
                        for (var i = 0; i < a[name].length; i++) {
                            result = compareObjects(a[name][i], b[name][i]);
                            if (result === false)
                                break;
                        }
                    }
                    else {
                        result = false;
                    }
                }
                else if (a[name] instanceof Object) {
                    result = compareObjects(a[name], b[name]);
                }
                else {
                    result = a[name] === b[name];
                }
                return !result;
            }
        });
    }
    return result;
}
exports.compareObjects = compareObjects;
exports.cssTransform = ['-webkit-transform', '-moz-transform', '-ms-transform', '-o-transform', 'transform'];
exports.DEBUG = false;
function getFullPath(path, dataMember) {
    return path + (dataMember ? '.' + dataMember : '');
}
exports.getFullPath = getFullPath;
function loadTemplates() {
    var promises = $("script[type='text/html']").map(function (_, script) {
        if (script.src) {
            var deffered = $.Deferred();
            $.get(script.src)
                .done(function (tmpl) {
                script.text = tmpl;
                if (tmpl.indexOf('type="text/html"') !== -1 || tmpl.indexOf("type='text/html'") !== -1) {
                    $(document.body).append(tmpl);
                }
                deffered.resolve();
            })
                .fail(function (jqXHR, textStatus, errorThrown) {
                deffered.reject();
            });
            return deffered.promise();
        }
    });
    return $.when.apply($.when, promises);
}
exports.loadTemplates = loadTemplates;
function getSizeFactor(width) {
    if (width < 768) {
        return 'xs';
    }
    else if (width < 992) {
        return 'sm';
    }
    else if (width < 1200) {
        return 'md';
    }
    else if (width < 1380) {
        return 'lg';
    }
    else {
        return 'xl';
    }
}
exports.getSizeFactor = getSizeFactor;
exports.staticContext = {
    _static: {
        searchPlaceholder: function () { return _localization_1.searchPlaceholder(); },
        selectPlaceholder: function () { return _localization_1.selectPlaceholder(); },
        noDataText: function () { return _localization_1.noDataText(); },
        ajaxSetup: ajaxSetup_1.ajaxSetup
    }
};
exports._defaultStaticContext = _internal_1.createGlobalModuleVariableFunc({});
function appendStaticContextToRootViewModel(root, dx) {
    if (dx === void 0) { dx = exports.staticContext; }
    if (dx)
        root.dx = __assign({}, dx, exports._defaultStaticContext());
    root.getLocalization = function () {
        return localization_utils_1.getLocalization.apply(root, arguments);
    };
    root.getPopupContainer = _utils_2.getParentContainer;
    root.surfaceClass = function (el) { return 'dx-designer-viewport dx-designer-viewport-' + getSizeFactor(el.clientWidth) + ' ' + (!_utils_2.getParentContainer(el, '.dx-theme-generic').length ? ' dx-theme-generic' : ''); };
}
exports.appendStaticContextToRootViewModel = appendStaticContextToRootViewModel;
function _ajax(uri, action, arg, processErrorCallback, ignoreError, customOptions, isError, getErrorMessage) {
    if (isError === void 0) { isError = function (data) { return !data.success; }; }
    if (getErrorMessage === void 0) { getErrorMessage = _infoMessageHelpers_1.getErrorMessage; }
    var deferred = $.Deferred();
    var requestData;
    if (action !== undefined && arg !== undefined) {
        requestData = {
            actionKey: action,
            arg: arg
        };
    }
    ajaxSetup_1.ajaxSetup.sendRequest(_utils_1.extend({}, {
        type: 'POST',
        data: requestData,
        url: uri
    }, customOptions)).fail(function (jqXHR, textStatus, errorThrown) {
        if (ignoreError && ignoreError()) {
            deferred.reject();
            return;
        }
        _processError_1._errorProcessor.call({ jqXHR: jqXHR, textStatus: textStatus, errorThrown: errorThrown, getRequestDetails: function () { return requestData || uri; } });
        _processError_1._processError(errorThrown, deferred, jqXHR, textStatus, processErrorCallback);
    })
        .done(function (data, textStatus, jqXHR) {
        if (!data) {
            deferred.reject();
            return;
        }
        if (!isError(data)) {
            deferred.resolve(data.result);
        }
        else {
            if (ignoreError && ignoreError()) {
                deferred.reject();
                return;
            }
            _processError_1._errorProcessor.call({ jqXHR: jqXHR, textStatus: textStatus, data: data, errorThrown: getErrorMessage(jqXHR), getRequestDetails: function () { return requestData || uri; } });
            _processError_1._processError('Internal Server Error', deferred, jqXHR, textStatus, processErrorCallback);
        }
    });
    return deferred.promise();
}
exports._ajax = _ajax;
function _ajaxWithOptions(options) {
    return _ajax(options.uri, options.action, options.arg, options.processErrorCallback, options.ignoreError, options.customOptions, options.isError, options.getErrorMessage);
}
exports._ajaxWithOptions = _ajaxWithOptions;
exports.ajax = function () {
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
    }
    if (params.length > 1) {
        return _ajax.apply(_this, params);
    }
    else {
        return _ajaxWithOptions(params[0]);
    }
};
function setAjax(newFunc) {
    exports.ajax = newFunc;
}
exports.setAjax = setAjax;
function cutRefs(model) {
    _visitors_1.objectsVisitor(model, function (target) {
        delete target['@Ref'];
    });
    return model;
}
exports.cutRefs = cutRefs;
exports.DesignerBaseElements = {
    MenuButton: 'dxrd-menubutton-template-base',
    Toolbar: 'dxrd-toolbar-template-base',
    Toolbox: 'dxrd-toolbox-template-base',
    Surface: 'dxrd-surface-template-base',
    RightPanel: 'dxrd-right-panel-template-base'
};
function generateDefaultParts(model) {
    return [
        { id: exports.DesignerBaseElements.MenuButton, templateName: exports.DesignerBaseElements.MenuButton, model: model },
        { id: exports.DesignerBaseElements.Toolbar, templateName: exports.DesignerBaseElements.Toolbar, model: model },
        { id: exports.DesignerBaseElements.Toolbox, templateName: exports.DesignerBaseElements.Toolbox, model: model },
        { id: exports.DesignerBaseElements.Surface, templateName: exports.DesignerBaseElements.Surface, model: model },
        { id: exports.DesignerBaseElements.RightPanel, templateName: exports.DesignerBaseElements.RightPanel, model: model }
    ];
}
exports.generateDefaultParts = generateDefaultParts;
function createActionWrappingFunction(wrapperName, func) {
    return function (actions) {
        actions.forEach(function (action) {
            if (!action['wrappedWith'] || action['wrappedWith'].indexOf(wrapperName) === -1) {
                var oldClickHandler = action.clickAction;
                action.clickAction = function (model) {
                    return func(model, oldClickHandler);
                };
                action['wrappedWith'] = action['wrappedWith'] || [];
                action['wrappedWith'].push(wrapperName);
            }
        });
    };
}
exports.createActionWrappingFunction = createActionWrappingFunction;
function createDesigner(model, surface, controlsFactory, groups, editors, parts, rtl, selection, designControlsHelper, undoEngine, customMerge, snapLinesCollector, groupLocalizationIDs) {
    if (groups === void 0) { groups = {}; }
    if (editors === void 0) { editors = []; }
    var context = new _designerCreator_1.DesignerContextGenerator(rtl)
        .addModel(model)
        .addSurface(surface)
        .addUndoEngine(undoEngine)
        .getContext();
    var designerGenerator = new _designerCreator_1.CommonDesignerGenerator(context, rtl);
    return designerGenerator
        .mapOnContext()
        .addSelection(function (settings) {
        settings.selection = selection || new _selection_1.SurfaceSelection();
        settings.snapHelper = new _snapLinesHelper_1.SnapLinesHelper(surface, _snapLinesHelper_1.SnapLinesHelper.snapTolerance, snapLinesCollector || new _snapLinesCollector_1.SnapLinesCollector());
        settings.editableObject = _combinedObj_1.CombinedObject.getEditableObject(settings.selection, context.undoEngine, customMerge).extend({ throttle: 1 });
        settings.addDragDrop(function (dragDropSettings) {
            dragDropSettings.dragHelperContent = new _dragHelperContent_1.DragHelperContent(settings.selection);
            dragDropSettings.dragDropStarted = _dragDropHandler_1.DragDropHandler.started;
            dragDropSettings.addDragDropHandler('dragHandler', new _selectionDragDropHandler_1.SelectionDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
            dragDropSettings.addDragDropHandler('toolboxDragHandler', new _toolboxDragDropHandler_1.ToolboxDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, controlsFactory));
        });
        settings.addResize(function (resizeSettings) {
            resizeSettings.handler = {
                starting: function () {
                    selection.expectClick = true;
                    context.undoEngine().start();
                },
                stopped: function () {
                    context.undoEngine().end();
                    setTimeout(function () { selection.expectClick = false; }, 100);
                },
                disabled: _dragDropHandler_1.DragDropHandler.started,
                snapHelper: settings.snapHelper
            };
        });
    })
        .addToolboxItems(function () { return _utils_3.getToolboxItems(controlsFactory.controlsMap); })
        .addIsLoading()
        .addControlProperties(editors, groups, groupLocalizationIDs)
        .addPopularProperties(controlsFactory)
        .addControlsHelper(function (settings) {
        settings
            .addControlsHelper(designControlsHelper)
            .addControlsStore();
    })
        .addTabPanel(undefined, function () {
        return [
            new tabPanel_1.TabInfo({
                text: 'Properties',
                template: 'dxrd-propertiestab',
                model: designerGenerator.getModel().propertyGrid,
                localizationId: 'AnalyticsCoreStringId.Cmd_Properties',
                visible: ko.pureComputed(function () { return !!model(); }),
                disabled: ko.pureComputed(function () { return designerGenerator.getModel().propertyGrid.focusedItem() instanceof Array; }).extend({ throttle: 100 })
            })
        ];
    })
        .addContextActions(function (settings) {
        settings.actionProviders = [];
        settings.createDefaultActions(designerGenerator.getModel().editableObject, designerGenerator.getModel().undoEngine);
    })
        .addMenu(function (settings) {
        settings.appMenuVisible = ko.observable(false);
        settings.toggleAppMenu = function () {
            settings.appMenuVisible(!settings.appMenuVisible());
        };
        settings.getMenuPopupContainer = function (el) { return $(el).closest('.dxrd-menu-button').prev('.dxrd-menu-container'); };
        settings.getMenuPopupTarget = function (el) { return $(el).closest('.dxrd-menu-button').find('.dxrd-menu-place'); };
    })
        .addElement('inlineTextEdit', function () { return new _inlineTextEdit_1.InlineTextEdit(designerGenerator.getModel().selection); })
        .addElement('actionsGroupTitle', function () { return function () { return localization_utils_1.getLocalization('Actions', 'AnalyticsCoreStringId.Actions'); }; })
        .addElement('updateFont', function () { return function (values) {
        _fonts_1.availableFonts(values);
    }; })
        .addElement('sortFont', function () { return function () {
        var sortedObj = {};
        var fonts = _fonts_1.availableFonts.peek();
        Object.keys(fonts).sort(function (a, b) { return a.localeCompare(b); }).forEach(function (key) { return sortedObj[key] = fonts[key]; });
        _fonts_1.availableFonts(sortedObj);
    }; })
        .addElement('surfaceSize', function () { return ko.observable(0); })
        .addElement('popularVisible', function () { return ko.pureComputed(function () {
        return designerGenerator.getModel().popularProperties._editors().some(function (x) { return x.visible(); }) ||
            designerGenerator.getModel().contextActions().length > 0;
    }); })
        .addActionList()
        .addParts()
        .getModel();
}
exports.createDesigner = createDesigner;
function localizeNoneString(noneValue) {
    var value = ko.unwrap(noneValue);
    if (value === 'none') {
        return localization_utils_1.getLocalization('none', 'DataAccessStringId.ParameterListEmpty');
    }
    else if (value === '(none)') {
        return (localization_utils_1.getLocalization('(none)', 'DxDesignerStringId.None') !== '(none)') ? localization_utils_1.getLocalization('(none)', 'DxDesignerStringId.None') : ('(' + localization_utils_1.getLocalization('none', 'DataAccessStringId.ParameterListEmpty') + ')');
    }
    return value;
}
exports.localizeNoneString = localizeNoneString;
function parseZoom(val) {
    var _value = Math.round(parseInt(val.replace('%', ''))) / 100;
    if (!_value)
        return 1;
    if (_value >= 5)
        return 5;
    if (_value <= 0.1)
        return 0.1;
    return _value;
}
exports.parseZoom = parseZoom;
function getResizableOptions($element, panelOffset, minWidth, position, startPosition, width, disabled) {
    return {
        starting: function () {
            $($element).css(position === startPosition ? 'right' : 'left', '');
        },
        handles: position === startPosition ? 'e' : 'w',
        stopped: $.noop,
        stop: $.noop,
        resize: function () {
            $($element).css({ left: position === startPosition ? panelOffset : '', right: position === startPosition ? '' : panelOffset });
            width && ko.isObservable(width) && width($($element).width());
        },
        disabled: disabled || false,
        zoom: 1,
        minimumWidth: minWidth,
        maximumWidth: 1000,
        $element: $element
    };
}
exports.getResizableOptions = getResizableOptions;
