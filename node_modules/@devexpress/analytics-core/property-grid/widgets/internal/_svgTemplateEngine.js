/**
* DevExpress Analytics (property-grid\widgets\internal\_svgTemplateEngine.js)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var ko = require("knockout");
var _extendedSvgTemplates_1 = require("./_extendedSvgTemplates");
var SvgTemplateSource = (function () {
    function SvgTemplateSource(template, _data, _templates) {
        this._data = _data;
        this._templates = _templates;
        this.templateName = template;
    }
    SvgTemplateSource.prototype.data = function (key, value) {
        this._data[this.templateName] = this._data[this.templateName] || {};
        if (arguments.length === 1) {
            return this._data[this.templateName][key];
        }
        this._data[this.templateName][key] = value;
    };
    SvgTemplateSource.prototype.text = function (value) {
        if (arguments.length === 0) {
            var template = this._templates[this.templateName];
            if (!template)
                throw new Error('Cannot find template with ID ' + this.templateName);
            return template;
        }
        this._templates[this.templateName] = value;
    };
    return SvgTemplateSource;
}());
var SvgTemplatesEngine = (function () {
    function SvgTemplatesEngine() {
        var _this = this;
        this._hasTemplate = function (name) { return _this._templates.hasOwnProperty(name); };
        this._data = {};
        this._templates = {};
    }
    Object.defineProperty(SvgTemplatesEngine, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SvgTemplatesEngine, "templates", {
        get: function () {
            return SvgTemplatesEngine.Instance._templates;
        },
        enumerable: true,
        configurable: true
    });
    SvgTemplatesEngine.addTemplates = function (templates) {
        ko.utils.extend(SvgTemplatesEngine.templates, templates);
    };
    SvgTemplatesEngine.getExistingTemplate = function (name) {
        return SvgTemplatesEngine.Instance._hasTemplate(name) ? name : undefined;
    };
    return SvgTemplatesEngine;
}());
exports.SvgTemplatesEngine = SvgTemplatesEngine;
var makeTemplateSource = ko.templateEngine.prototype['makeTemplateSource'];
ko.templateEngine.prototype['makeTemplateSource'] = function (template, doc) {
    if (typeof template === 'string' && SvgTemplatesEngine.getExistingTemplate(template) && !document.getElementById(template)) {
        return new SvgTemplateSource(template, SvgTemplatesEngine['_instance']['_data'], SvgTemplatesEngine.templates);
    }
    else {
        return makeTemplateSource.apply(this, [template, doc]);
    }
};
function getTemplate(id) {
    var id = id[0] === '#' ? id.substr(1) : id;
    return $('#' + id).text() || SvgTemplatesEngine.templates[id];
}
exports.getTemplate = getTemplate;
require("../../../dx-analytics-core-svg-templates");
SvgTemplatesEngine.addTemplates(_extendedSvgTemplates_1.extendedTemplates(SvgTemplatesEngine.templates));
