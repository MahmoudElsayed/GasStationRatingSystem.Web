/**
* DevExpress HTML/JS Reporting (viewer\search\_searchViewModel.js)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _searchResultNavigator_1 = require("./_searchResultNavigator");
var constants_1 = require("../constants");
var settings_1 = require("../settings");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var SearchViewModel = (function (_super) {
    __extends(SearchViewModel, _super);
    function SearchViewModel(reportPreview) {
        var _this = _super.call(this) || this;
        _this.actions = [];
        _this.focusRequested = ko.observable(true);
        _this.matchWholeWord = ko.observable(false);
        _this.matchCase = ko.observable(false);
        _this.searchUp = ko.observable(false);
        _this.searchText = ko.observable();
        _this.searchResult = ko.observable();
        _this.loading = ko.observable(false);
        _this.resetSearchResult();
        _this._resultNavigator = SearchViewModel.createResultNavigator(_this, reportPreview);
        _this.clean = function () { _this.searchText(''); };
        _this._disposables.push(reportPreview._currentDocumentId.subscribe(function (newVal) {
            _this.resetSearchResult();
        }));
        _this._disposables.push(reportPreview._currentReportId.subscribe(function (newVal) {
            _this.resetSearchResult();
        }));
        _this.findUp = function () { _this.searchUp(true); _this.findNext(); };
        _this.findDown = function () { _this.searchUp(false); _this.findNext(); };
        _this.goToResult = function (result) { _this._resultNavigator.goToResult(result.id); };
        var newSearch = function (text, matchCase, matchWholeWord) {
            _this.searchResult([]);
            _this._resultNavigator.currentResult(null);
            if (!text) {
                reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick('');
                return;
            }
            var mCase = _this.matchCase();
            var text = mCase ? _this.searchText() : _this.searchText().toLocaleLowerCase();
            var cache = _this.matchWholeWord()
                ? mCase ? _this._cachedWholeWordWithCaseRequests : _this._cachedWholeWordRequests
                : mCase ? _this._cachedCaseSensitiveRequests : _this._cachedRequests;
            if (cache[text]) {
                _this.searchResult(cache[text]);
                return;
            }
            _this.loading(true);
            var self = _this;
            reportPreview.requestWrapper.findTextRequest(text).done(function (result) {
                self.findTextRequestDone(result, cache[text]);
            }).fail(function (error) {
                self.loading(false);
            });
        };
        _this.findNext = function () {
            if (_this.loading()) {
                return;
            }
            _this._resultNavigator.next(_this.searchUp()) || newSearch(_this.searchText(), _this.matchCase(), _this.matchWholeWord());
        };
        _this._disposables.push(_this.searchText.subscribe(function (newVal) { newSearch(newVal, _this.matchCase(), _this.matchWholeWord()); }), _this.matchCase.subscribe(function (newVal) { newSearch(_this.searchText(), newVal, _this.matchWholeWord()); }), _this.matchWholeWord.subscribe(function (newVal) { newSearch(_this.searchText(), _this.matchCase(), newVal); }));
        var disabled = ko.pureComputed(function () {
            var documentId = reportPreview['_currentDocumentId']();
            var pageIndex = reportPreview.pageIndex();
            return reportPreview.documentBuilding() || !documentId || pageIndex === -1;
        });
        _this.actions.push({
            id: constants_1.ActionId.Search,
            text: analytics_utils_1.getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header'),
            imageClassName: 'dxrd-image-search',
            imageTemplateName: 'dxrd-svg-preview-search',
            disabled: disabled,
            visible: ko.pureComputed(function () { return settings_1.SearchAvailable(); }),
            hasSeparator: true,
            hotKey: { ctrlKey: false, keyCode: 70 },
            clickAction: function () {
                if (!_this.tabInfo.active()) {
                    _this.tabInfo.active(true);
                }
                else {
                    _this.tabInfo.active.notifySubscribers(true);
                }
            }
        });
        _this.tabInfo = new analytics_utils_1.TabInfo({
            text: 'Search',
            template: 'dxrd-preview-search',
            model: _this,
            localizationId: 'ASPxReportsStringId.SearchDialog_Header',
            imageClassName: 'search',
            imageTemplateName: 'dxrd-svg-preview-search',
            visible: ko.pureComputed(function () { return !disabled() && settings_1.SearchAvailable(); })
        });
        _this._disposables.push(_this.tabInfo.active.subscribe(function (newVal) {
            newVal && setTimeout(function () { return _this.focusRequested.notifySubscribers(); }, 100);
        }));
        return _this;
    }
    SearchViewModel.prototype.resetSearchResult = function () {
        this._cachedRequests = {};
        this._cachedWholeWordRequests = {};
        this._cachedCaseSensitiveRequests = {};
        this._cachedWholeWordWithCaseRequests = {};
        this.searchResult([]);
        this.searchText('');
    };
    SearchViewModel.prototype.findTextRequestDone = function (result, cache) {
        this.loading(false);
        if (!result) {
            this.searchResult([]);
            return;
        }
        cache = (result.success ? result.matches : []) || [];
        this.searchResult(cache);
    };
    SearchViewModel.prototype.getActions = function (context) {
        return this.actions;
    };
    Object.defineProperty(SearchViewModel.prototype, "disabled", {
        get: function () { return this.loading(); },
        enumerable: true,
        configurable: true
    });
    SearchViewModel.createResultNavigator = function (seacrhModel, reportPreview) {
        return new _searchResultNavigator_1.SearchResultNavigator(seacrhModel, reportPreview);
    };
    return SearchViewModel;
}(analytics_utils_1.Disposable));
exports.SearchViewModel = SearchViewModel;
