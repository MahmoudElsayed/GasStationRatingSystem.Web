/**
* DevExpress HTML/JS Reporting (viewer\internal\_initializer.js)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var previewParametersViewModel_1 = require("../parameters/previewParametersViewModel");
var _previewModel_1 = require("./_previewModel");
var _previewRequestWrapper_1 = require("./_previewRequestWrapper");
var reportPreview_1 = require("../reportPreview");
var _searchViewModel_1 = require("../search/_searchViewModel");
var _documentMapModel_1 = require("../documentMap/_documentMapModel");
var previewParameterHelper_1 = require("../parameters/previewParameterHelper");
var exportOptionsModel_1 = require("../exportOptions/exportOptionsModel");
var _utils_1 = require("../../common/utils/_utils");
var _actions_1 = require("./_actions");
var constants_1 = require("../constants");
var _progressBarUtils_1 = require("./_progressBarUtils");
var _sizeUtils_1 = require("./_sizeUtils");
var settings_1 = require("../settings");
var _mobileInitializer_1 = require("../mobile/utils/_mobileInitializer");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var $ = require("jquery");
var config_1 = require("devextreme/core/config");
var _utils_2 = require("../search/_utils");
function createDesktopPreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, rtl, tabPanelSettings, progressBarSettings) {
    if (previewVisible === void 0) { previewVisible = true; }
    if (applyBindings === void 0) { applyBindings = true; }
    if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
    var previewWrapper = new _previewRequestWrapper_1.PreviewRequestWrapper(null, callbacks), reportPreview = new reportPreview_1.ReportPreview(handlerUri, previewWrapper, undefined, callbacks, rtl), searchModel = new _searchViewModel_1.SearchViewModel(reportPreview);
    var documentMapModel = new _documentMapModel_1.DocumentMapModel(reportPreview);
    var parametersModel = new previewParametersViewModel_1.PreviewParametersViewModel(reportPreview, new previewParameterHelper_1.PreviewParameterHelper(parametersInfo && parametersInfo.knownEnums, callbacks));
    var exportModel = new exportOptionsModel_1.ExportOptionsModel(reportPreview);
    reportPreview.canSwitchToDesigner = !previewVisible;
    reportPreview.allowURLsWithJSContent = allowURLsWithJSContent;
    previewWrapper.initialize(reportPreview, parametersModel, searchModel);
    var tabPanel = new analytics_utils_1.TabPanel({
        tabs: [
            parametersModel.tabInfo,
            exportModel.tabInfo,
            searchModel.tabInfo,
            documentMapModel.tabInfo
        ],
        autoSelectTab: true,
        rtl: rtl
    });
    tabPanel.collapsed(true);
    var fullscreenEnabled = _utils_1.createFullscreenComputed(element, reportPreview);
    var previewActions = new _actions_1.PreviewActions(reportPreview);
    var designPreviewActions = new _actions_1.PreviewDesignerActions(reportPreview, fullscreenEnabled);
    var globalActionProviders = ko.observableArray([previewActions, exportModel, searchModel, designPreviewActions]);
    var actionLists = new _actions_1.ActionLists(reportPreview, globalActionProviders, callbacks && callbacks.customizeActions, reportPreview.previewVisible);
    reportPreview.previewVisible(previewVisible);
    var designerModelOptions = {
        rootStyle: 'dxrd-preview dxd-back-primary',
        reportPreview: reportPreview,
        parametersModel: parametersModel,
        exportModel: exportModel,
        searchModel: searchModel,
        documentMapModel: documentMapModel,
        tabPanel: tabPanel,
        actionLists: actionLists,
        rtl: reportPreview.rtlViewer
    };
    var designerModel = new _previewModel_1.PreviewModel(designerModelOptions);
    designerModel._addDisposable(previewActions);
    designerModel._addDisposable(designPreviewActions);
    designerModel.parts = [
        { id: constants_1.PreviewElements.Toolbar, templateName: constants_1.PreviewElements.Toolbar, model: { actionLists: actionLists } },
        { id: constants_1.PreviewElements.Surface, templateName: constants_1.PreviewElements.Surface, model: designerModel.reportPreview },
        { id: constants_1.PreviewElements.RightPanel, templateName: constants_1.PreviewElements.RightPanel, model: designerModel }
    ];
    callbacks && callbacks.customizeParts && callbacks.customizeParts(designerModel.parts);
    var $window = $(window);
    var updateProgressPosition = _progressBarUtils_1.getUpdateProgressBarCallback(progressBarSettings, designerModel, reportPreview, element, $window);
    var updatePreviewContentSize_ = _sizeUtils_1.updatePreviewContentSize(reportPreview.previewSize, element, rtl);
    if (tabPanelSettings) {
        tabPanelSettings.width && tabPanel.width(tabPanelSettings.width);
        tabPanelSettings.position && tabPanel.position(tabPanelSettings.position);
    }
    var updateSizesCallback = function () {
        updatePreviewContentSize_ && updatePreviewContentSize_(tabPanel.position());
        updateProgressPosition && updateProgressPosition();
    };
    designerModel.updateSurfaceSize = updateSizesCallback;
    designerModel.resizeCallback = updateSizesCallback;
    $window.bind('resize', designerModel.resizeCallback);
    designerModel._addDisposable(fullscreenEnabled);
    designerModel._addDisposable(fullscreenEnabled.subscribe(designerModel.resizeCallback));
    designerModel._addDisposable({
        dispose: function () {
            $window.unbind('resize', designerModel.resizeCallback);
        }
    });
    designerModel._addDisposable(tabPanel.width.subscribe(function () {
        setTimeout(function () { return updatePreviewContentSize_(tabPanel.position()); }, 1);
    }));
    designerModel._addDisposable(tabPanel.position.subscribe(function (newVal) {
        updatePreviewContentSize_(newVal);
    }));
    designerModel._addDisposable(tabPanel.isEmpty.subscribe(function () {
        setTimeout(function () {
            updatePreviewContentSize_(tabPanel.position());
        }, 1);
    }));
    updateSizesCallback();
    designerModel._addDisposable({
        dispose: function () {
            designerModel.updateSurfaceSize = null;
            designerModel.resizeCallback = null;
            updatePreviewContentSize_ = null;
            updateProgressPosition = null;
        }
    });
    analytics_internal_1.appendStaticContextToRootViewModel(designerModel, {
        _static: __assign({}, analytics_internal_1.staticContext._static, { formatSearchResult: _utils_2.formatSearchResult })
    });
    if (element && !reportPreview.canSwitchToDesigner && applyBindings) {
        callbacks.beforeRender && callbacks.beforeRender(designerModel);
        $(element).children().remove();
        ko.applyBindings(designerModel, element);
    }
    return designerModel;
}
exports.createDesktopPreview = createDesktopPreview;
function _createPreview(element, callbacks, localization, parametersInfo, handlerUri, previewVisible, rtl, isMobile, mobileModeSettings, applyBindings, allowURLsWithJSContent, remoteSettings, tabPanelSettings, progressBarSettings) {
    if (previewVisible === void 0) { previewVisible = true; }
    if (applyBindings === void 0) { applyBindings = true; }
    if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
    var disposableCallback = callbacks && callbacks.onServerError && analytics_internal_1.processErrorEvent(callbacks.onServerError);
    if (localization && localization.currentCulture) {
        analytics_internal_1.applyLocalizationToDevExtreme(localization.currentCulture);
    }
    config_1.default({ rtlEnabled: !!rtl });
    if (remoteSettings && (remoteSettings.authToken || remoteSettings.serverUri)) {
        settings_1.AsyncExportApproach(true);
        handlerUri = analytics_internal_1.RequestHelper.generateUri(remoteSettings.serverUri, settings_1.ReportServerInvokeUri);
        settings_1.SearchAvailable(false);
        settings_1.EditablePreviewEnabled(false);
        settings_1.ReportServerDownloadUri(analytics_internal_1.RequestHelper.generateUri(remoteSettings.serverUri, settings_1.ReportServerExportUri));
        if (remoteSettings.authToken) {
            analytics_utils_1.ajaxSetup.ajaxSettings = {
                headers: {
                    'Authorization': 'Bearer ' + remoteSettings.authToken
                }
            };
        }
    }
    var designerModel;
    if (isMobile) {
        designerModel = _mobileInitializer_1.createMobilePreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, mobileModeSettings, progressBarSettings);
    }
    else {
        designerModel = createDesktopPreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, rtl, tabPanelSettings, progressBarSettings);
    }
    if (disposableCallback) {
        designerModel._addDisposable(disposableCallback);
    }
    return designerModel;
}
function createPreview(element, callbacks, localization, parametersInfo, handlerUri, previewVisible, rtl, isMobile, mobileModeSettings, applyBindings, allowURLsWithJSContent, remoteSettings, tabPanelSettings, progressBarSettings) {
    if (previewVisible === void 0) { previewVisible = true; }
    if (applyBindings === void 0) { applyBindings = true; }
    if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
    if (localization && localization.localization) {
        analytics_utils_1.addCultureInfo({
            messages: localization.localization
        });
    }
    var localizationCallbacks = [];
    callbacks && callbacks.customizeLocalization && callbacks.customizeLocalization(localizationCallbacks);
    return analytics_internal_1.resolveFromPromises(localizationCallbacks, function () {
        return _createPreview(element, callbacks, localization, parametersInfo, handlerUri, previewVisible, rtl, isMobile, mobileModeSettings, applyBindings, allowURLsWithJSContent, remoteSettings, tabPanelSettings, progressBarSettings);
    });
}
exports.createPreview = createPreview;
function createAndInitPreviewModel(viewerModel, element, callbacks, applyBindings) {
    return createPreviewModel(viewerModel, element, callbacks, applyBindings).done(function (previewModel) {
        initPreviewModel(previewModel, viewerModel);
    });
}
exports.createAndInitPreviewModel = createAndInitPreviewModel;
function createPreviewModel(viewerModel, element, callbacks, applyBindings) {
    analytics_internal_1.initGlobalize(viewerModel);
    return createPreview(element, callbacks, viewerModel, viewerModel.parametersInfo, viewerModel.handlerUri, undefined, viewerModel.rtl, viewerModel.isMobile, viewerModel.mobileModeSettings, applyBindings, viewerModel.allowURLsWithJSContent, viewerModel.remoteSettings, viewerModel.tabPanelSettings, viewerModel.progressBarSettings).done(function () {
        $.extend(true, _utils_1.cultureInfo, viewerModel.cultureInfoList);
    });
}
exports.createPreviewModel = createPreviewModel;
function initPreviewModel(previewModel, viewerModel) {
    if (viewerModel.reportId || viewerModel.documentId) {
        previewModel.reportPreview.initialize($.Deferred().resolve(viewerModel).promise());
    }
    else {
        var unwrappedUrl = ko.unwrap(viewerModel.reportUrl);
        if (unwrappedUrl) {
            previewModel.OpenReport(unwrappedUrl);
        }
    }
}
exports.initPreviewModel = initPreviewModel;
