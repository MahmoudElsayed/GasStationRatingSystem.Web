/**
* DevExpress HTML/JS Reporting (viewer\internal\_progressViewModel.d.ts)
* Version:  20.2.4
* Build date: Dec 2, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
export interface IElementPosition {
    top: boolean;
    bottom?: boolean;
    left: boolean;
    right?: boolean;
}
export interface IProgressHandler {
    stop?: () => void;
    cancelText?: ko.Observable<string> | ko.Computed<string>;
    progress: ko.Observable<number> | ko.Computed<number>;
    text: ko.Observable<string> | ko.Computed<string>;
    visible: ko.Observable<boolean> | ko.Computed<boolean>;
    startProgress: (onComplete?: () => void, onStop?: () => void) => void;
    inProgress: ko.Observable<boolean> | ko.Computed<boolean>;
    complete: () => void;
    cssClasses: ko.Observable<string | {
        [key: string]: boolean;
    }>;
    setPosition: (position: IElementPosition) => void;
}
export declare class ProgressViewModel implements IProgressHandler {
    progress: ko.Observable<number>;
    private _forceInvisible;
    private _onComplete;
    stop: () => void;
    inProgress: ko.Observable<boolean>;
    cancelText: ko.Observable<any>;
    text: ko.Observable<string>;
    cssClasses: ko.Observable<{
        [key: string]: boolean;
    }>;
    visible: ko.PureComputed<boolean>;
    setPosition(position: IElementPosition): void;
    complete: () => void;
    startProgress: (onComplete?: () => void, onStop?: () => void) => void;
}
